/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Waypoint as PrismaWaypoint } from "@prisma/client";

export class WaypointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WaypointCountArgs, "select">): Promise<number> {
    return this.prisma.waypoint.count(args);
  }

  async waypoints<T extends Prisma.WaypointFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaypointFindManyArgs>
  ): Promise<PrismaWaypoint[]> {
    return this.prisma.waypoint.findMany<Prisma.WaypointFindManyArgs>(args);
  }
  async waypoint<T extends Prisma.WaypointFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaypointFindUniqueArgs>
  ): Promise<PrismaWaypoint | null> {
    return this.prisma.waypoint.findUnique(args);
  }
  async createWaypoint<T extends Prisma.WaypointCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaypointCreateArgs>
  ): Promise<PrismaWaypoint> {
    return this.prisma.waypoint.create<T>(args);
  }
  async updateWaypoint<T extends Prisma.WaypointUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaypointUpdateArgs>
  ): Promise<PrismaWaypoint> {
    return this.prisma.waypoint.update<T>(args);
  }
  async deleteWaypoint<T extends Prisma.WaypointDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WaypointDeleteArgs>
  ): Promise<PrismaWaypoint> {
    return this.prisma.waypoint.delete(args);
  }
}
