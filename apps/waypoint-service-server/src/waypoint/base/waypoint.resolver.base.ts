/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Waypoint } from "./Waypoint";
import { WaypointCountArgs } from "./WaypointCountArgs";
import { WaypointFindManyArgs } from "./WaypointFindManyArgs";
import { WaypointFindUniqueArgs } from "./WaypointFindUniqueArgs";
import { CreateWaypointArgs } from "./CreateWaypointArgs";
import { UpdateWaypointArgs } from "./UpdateWaypointArgs";
import { DeleteWaypointArgs } from "./DeleteWaypointArgs";
import { WaypointService } from "../waypoint.service";
@graphql.Resolver(() => Waypoint)
export class WaypointResolverBase {
  constructor(protected readonly service: WaypointService) {}

  async _waypointsMeta(
    @graphql.Args() args: WaypointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Waypoint])
  async waypoints(
    @graphql.Args() args: WaypointFindManyArgs
  ): Promise<Waypoint[]> {
    return this.service.waypoints(args);
  }

  @graphql.Query(() => Waypoint, { nullable: true })
  async waypoint(
    @graphql.Args() args: WaypointFindUniqueArgs
  ): Promise<Waypoint | null> {
    const result = await this.service.waypoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Waypoint)
  async createWaypoint(
    @graphql.Args() args: CreateWaypointArgs
  ): Promise<Waypoint> {
    return await this.service.createWaypoint({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Waypoint)
  async updateWaypoint(
    @graphql.Args() args: UpdateWaypointArgs
  ): Promise<Waypoint | null> {
    try {
      return await this.service.updateWaypoint({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Waypoint)
  async deleteWaypoint(
    @graphql.Args() args: DeleteWaypointArgs
  ): Promise<Waypoint | null> {
    try {
      return await this.service.deleteWaypoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
